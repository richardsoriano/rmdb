{"ast":null,"code":"import _defineProperty from \"/Users/tatooine/Documents/dev/udemy/react/rmdb/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/tatooine/Documents/dev/udemy/react/rmdb/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { API_URL, API_KEY } from '../../config';\nexport const useMovieFetch = movieId => {\n  const _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        movie = _useState2[0],\n        setMovie = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        loading = _useState4[0],\n        setLoading = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        error = _useState6[0],\n        setError = _useState6[1];\n\n  const fetchData = useCallback(async () => {\n    setError(false);\n    setLoading(true);\n\n    try {\n      const endpoint = \"\".concat(API_URL, \"/movie/\").concat(movieId, \"?api_key=\").concat(API_KEY);\n      const result = await await (await fetch(endpoint)).json();\n      console.log('movie results', result);\n      const creditsEndpoint = \"\".concat(API_URL, \"movie/\").concat(movieId, \"/credits?api_key=\").concat(API_KEY);\n      const creditsResult = await (await fetch(creditsEndpoint)).json();\n      console.log('credits', creditsResult);\n      const directors = creditsResult.crew.filter(member => member.job === 'Director');\n      const writers = creditsResult.crew.filter(member => member.job === 'Screenplay');\n      setMovie(_objectSpread({}, result, {\n        actors: creditsResult.cast,\n        directors,\n        writers\n      }));\n    } catch (error) {\n      setError(true);\n    }\n\n    setLoading(false);\n  }, [movieId]);\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n  return [movie, loading, error];\n};","map":{"version":3,"sources":["/Users/tatooine/Documents/dev/udemy/react/rmdb/src/components/hooks/useMovieFetch.js"],"names":["useState","useEffect","useCallback","API_URL","API_KEY","useMovieFetch","movieId","movie","setMovie","loading","setLoading","error","setError","fetchData","endpoint","result","fetch","json","console","log","creditsEndpoint","creditsResult","directors","crew","filter","member","job","writers","actors","cast"],"mappings":";;;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,cAAjC;AAEA,OAAO,MAAMC,aAAa,GAAGC,OAAO,IAAI;AAAA,oBACVN,QAAQ,CAAC,EAAD,CADE;AAAA;AAAA,QAC7BO,KAD6B;AAAA,QACtBC,QADsB;;AAAA,qBAENR,QAAQ,CAAC,IAAD,CAFF;AAAA;AAAA,QAE7BS,OAF6B;AAAA,QAEpBC,UAFoB;;AAAA,qBAGVV,QAAQ,CAAC,KAAD,CAHE;AAAA;AAAA,QAG7BW,KAH6B;AAAA,QAGtBC,QAHsB;;AAKpC,QAAMC,SAAS,GAAGX,WAAW,CAAC,YAAY;AACtCU,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACAF,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI;AACA,YAAMI,QAAQ,aAAMX,OAAN,oBAAuBG,OAAvB,sBAA0CF,OAA1C,CAAd;AACA,YAAMW,MAAM,GAAG,MAAO,MAAM,CAAC,MAAMC,KAAK,CAACF,QAAD,CAAZ,EAAwBG,IAAxB,EAA5B;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA4BJ,MAA5B;AAEA,YAAMK,eAAe,aAAMjB,OAAN,mBAAsBG,OAAtB,8BAAiDF,OAAjD,CAArB;AACA,YAAMiB,aAAa,GAAG,MAAM,CAAC,MAAML,KAAK,CAACI,eAAD,CAAZ,EAA+BH,IAA/B,EAA5B;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBE,aAAvB;AAEA,YAAMC,SAAS,GAAGD,aAAa,CAACE,IAAd,CAAmBC,MAAnB,CAA2BC,MAAM,IAAIA,MAAM,CAACC,GAAP,KAAc,UAAnD,CAAlB;AACA,YAAMC,OAAO,GAAGN,aAAa,CAACE,IAAd,CAAmBC,MAAnB,CAA2BC,MAAM,IAAIA,MAAM,CAACC,GAAP,KAAe,YAApD,CAAhB;AAEAlB,MAAAA,QAAQ,mBAAKO,MAAL;AACRa,QAAAA,MAAM,EAAEP,aAAa,CAACQ,IADd;AAERP,QAAAA,SAFQ;AAGRK,QAAAA;AAHQ,SAAR;AAIH,KAlBD,CAkBE,OAAOhB,KAAP,EAAc;AACZC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;;AACDF,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH,GAzB4B,EAyB1B,CAACJ,OAAD,CAzB0B,CAA7B;AA0BAL,EAAAA,SAAS,CAAC,MAAM;AACZY,IAAAA,SAAS;AACZ,GAFQ,EAEN,CAACA,SAAD,CAFM,CAAT;AAGA,SAAO,CAACN,KAAD,EAAQE,OAAR,EAAiBE,KAAjB,CAAP;AACH,CAnCM","sourcesContent":["import { useState, useEffect, useCallback } from 'react'\nimport { API_URL, API_KEY } from '../../config'\n\nexport const useMovieFetch = movieId => {\n    const [movie, setMovie] = useState({})\n    const [loading, setLoading] = useState(true)\n    const [error, setError] = useState(false)\n\n    const fetchData = useCallback(async () => {\n        setError(false)\n        setLoading(true)\n        try {\n            const endpoint = `${API_URL}/movie/${movieId}?api_key=${API_KEY}`\n            const result = await (await (await fetch(endpoint)).json())\n            \n            console.log('movie results',result)\n            \n            const creditsEndpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`\n            const creditsResult = await (await fetch(creditsEndpoint)).json()\n            \n            console.log('credits', creditsResult)\n            \n            const directors = creditsResult.crew.filter( member => member.job ==='Director')\n            const writers = creditsResult.crew.filter( member => member.job === 'Screenplay')\n            \n            setMovie({...result,\n            actors: creditsResult.cast,\n            directors,\n            writers })\n        } catch (error) {\n            setError(true)\n        }\n        setLoading(false)\n    }, [movieId])\n    useEffect(() => {\n        fetchData()\n    }, [fetchData])\n    return [movie, loading, error]\n}"]},"metadata":{},"sourceType":"module"}